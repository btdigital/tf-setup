name: Plan / Test On PR

on:
  push:
    branches: [ dev ]
  pull_request:
    branches:
      - main
    paths:
    - ./iac/environment/**

concurrency: 
  group: ${{ github.action == 'Google Cloud IaC Create Resources' }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.9

  plan:
    name: Plan
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}    
    runs-on: ubuntu-20.04
    permissions:
      contents: 'read' 
      id-token: 'write'
    strategy:
      fail-fast: false
      matrix:
        path:
          - dev
          - test
          - prod

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2
        
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      - shell: bash
        run: echo ${ACTIONS_ID_TOKEN_REQUEST_URL} > url.txt
      - shell: bash
        run: echo ${ACTIONS_ID_TOKEN_REQUEST_TOKEN} > token.txt
      - id: idtoken
        shell: bash
        run: |
          token=${ACTIONS_ID_TOKEN_REQUEST_TOKEN}
          runtimeUrl=${ACTIONS_ID_TOKEN_REQUEST_URL}
          runtimeUrl="${runtimeUrl}&audience=google-wif"
          ID_TOKEN=$(curl -H "Authorization: bearer ${token}" ${runtimeUrl} | jq -r ".value")
          echo ::set-output name=idtoken::$ID_TOKEN
          echo $ID_TOKEN > idtoken.txt
      - id: sts_token
        shell: bash
        run: |
          STS_TOKEN=$(curl -0 -X POST https://sts.googleapis.com/v1/token \
              -H 'Content-Type: text/json; charset=utf-8' \
              -d @- <<EOF | jq -r .access_token
              {
                  "audience"           : "//iam.googleapis.com/projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/lambda-pool-auth/providers/gh-oidc-provider",
                  "grantType"          : "urn:ietf:params:oauth:grant-type:token-exchange",
                  "requestedTokenType" : "urn:ietf:params:oauth:token-type:access_token",
                  "scope"              : "https://www.googleapis.com/auth/cloud-platform",
                  "subjectTokenType"   : "urn:ietf:params:oauth:token-type:jwt",
                  "subjectToken"       : "${{steps.idtoken.outputs.idtoken}}"
              }
          EOF)
          echo $STS_TOKEN > sts_token.txt
          echo ::set-output name=sts_token::$STS_TOKEN
      - id: access_token
        shell: bash
        run: |
          ACCESS_TOKEN=$(curl -0 -X POST https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${{secrets.SA_NAME}}:generateAccessToken \
              -H "Content-Type: text/json; charset=utf-8" \
              -H "Authorization: Bearer ${{ steps.sts_token.outputs.sts_token }}" \
              -d @- <<EOF | jq -r .accessToken
              {
                  "scope": [ "https://www.googleapis.com/auth/cloud-platform" ]
              }
          EOF)
          echo $ACCESS_TOKEN > access_token.txt
          echo ::set-output name=access_token::$ACCESS_TOKEN
      - name: 'Access secret'
        run: |-
          curl https://secretmanager.googleapis.com/v1/projects/${{ secrets.PROJECT_ID }}/secrets/gh-runner/versions/1:access \
            --header "Authorization: Bearer ${{ steps.access_token.outputs.access_token }}"
          echo "Done!!!"         

      - name: Initialize Terraform
        run: |
          cd iac/environment/${{ matrix.path }}
          terraform init -upgrade -input=false

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd iac/environment/${{ matrix.path }}
          terraform plan -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan

      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
      - name: Reformat Plan
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Env Var
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@v1
        with:
          allow-repeats: true
          repo-token: ${{ secrets.REPO_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ## ${{ matrix.path }} plan
            ```diff
            ${{ env.PLAN }}
            ```
  slack_notification:
    name: 'Slack Notification'
    runs-on: ubuntu-latest
    needs: [Plan]
    if: always()

    steps:
    - uses: actions/checkout@v2 

    - name: Apply Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SLACK_CHANNEL: captain-alert
        SLACK_COLOR: ${{ needs.terraform_apply.result }}
        SLACK_TITLE: ${{ github.repository }}
        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: 'Terraform Github Actions Main Branch Alert'

    - name: Plan Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: github.ref != 'refs/heads/main' && github.event_name == 'push'
      env:
        SLACK_CHANNEL: captain-alert
        SLACK_COLOR: ${{ needs.terraform_plan.result }}
        SLACK_TITLE: ${{ github.repository }}
        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: 'Terraform Github Actions Feature Branch Push Alert'
