name: Plan / Test On PR

on:
  push:
    branches: [ "local" ]
    paths:
    - 'iac/**'
  pull_request:
    branches: [ "dev" ]     
    paths:
    - 'iac/**'

concurrency: 
  group: ${{ github.action == 'Google Cloud IaC Create Resources' }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash
    working-directory: ./iac

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.9

      - name: Run terraform fmt check
        run: terraform fmt -check -diff -recursive ./iac**

  plan:
    name: Plan
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
    
    runs-on: ubuntu-20.04
    permissions:
      id-token: 'write'
      contents: 'read'
    strategy:
      fail-fast: false
      matrix:
        path:
          - dev
          - test
          - prod

    steps:
      - name: Check out code
        uses: 'actions/checkout@v3'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.9

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          version: "latest"
          workload_identity_provider: 'projects/157381548024/locations/global/workloadIdentityPools/lambda-pool-auth/providers/gh-oidc-provider'
          service_account: 'github_actions_sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com'
          token_format: 'access_token'
          access_token_lifetime: '300s'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
          
      - name: Initialize Terraform
        run: |
          cd terraform/${{ matrix.path }}
          terraform init -input=false

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd terraform/${{ matrix.path }}
          terraform plan -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan

      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
      - name: Reformat Plan
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Env Var
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@v1
        with:
          allow-repeats: true
          repo-token: ${{ secrets.REPO_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ## ${{ matrix.path }} plan
            ```diff
            ${{ env.PLAN }}
            ```
  slack_notification:
    name: 'Slack Notification'
    runs-on: ubuntu-latest
    needs: [Plan]
    if: always()

    steps:
    - uses: actions/checkout@v2 

    - name: Apply Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SLACK_CHANNEL: captain-alert
        SLACK_COLOR: ${{ needs.terraform_apply.result }}
        SLACK_TITLE: ${{ github.repository }}
        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: 'Terraform Github Actions Main Branch Alert'

    - name: Plan Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: github.ref != 'refs/heads/main' && github.event_name == 'push'
      env:
        SLACK_CHANNEL: captain-alert
        SLACK_COLOR: ${{ needs.terraform_plan.result }}
        SLACK_TITLE: ${{ github.repository }}
        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: 'Terraform Github Actions Feature Branch Push Alert'
